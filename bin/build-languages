#!/usr/bin/env php
<?php

class BuildLanguages
{
    private const CLASS_TEMPLATE = <<<EOT
<?php

/*
 * This file is part of the ixnode/php-timezone project.
 *
 * (c) Björn Hempel <https://www.hempel.li/>
 *
 * For the full copyright and license information, please view the LICENSE.md
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace Ixnode\PhpTimezone\Constants;

/**
 * Class Language (auto-generated with bin/build-locales from "%s")
 *
 * @author Björn Hempel <bjoern@hempel.li>
 * @version 0.1.0 (%s)
 * @since 0.1.0 (%s) Generated version.
 * @SuppressWarnings(PHPMD.ExcessiveClassLength)
 */
class Language
{
%s%s%s}

EOT;

    /**
     * @param string $csvFile
     */
    public function __construct(protected string $csvFile)
    {
    }

    /**
     * Remove the bom flag from given string.
     *
     * @param string $text
     * @return string
     */
    function removeUtf8Bom(string $text): string
    {
        $bom = pack('H*','EFBBBF');
        $text = preg_replace("/^$bom/", '', $text);

        return $text;
    }

    public function getLanguages(): array
    {
        /* Check if the file exists. */
        if (!file_exists($this->csvFile)) {
            print sprintf('The given file does not exist ("%s").%s', $this->csvFile, PHP_EOL);
            exit(1);
        }

        /* Load the content of the file. */
        $csvContent = file_get_contents($this->csvFile);

        /* Convert the content of the CSV into an array. */
        $data = array();
        $lines = explode(PHP_EOL, $csvContent);

        /* The first line contains the languages, we use these as keys for the array. */
        $line = array_shift($lines);
        $languages = str_getcsv($this->removeUtf8Bom($line), ';');

        /* Remove the first column, because it does contain the locale header. */
        //array_shift($languages);

        foreach ($lines as $line) {

            /* Ignore empty lines. */
            if (empty($line)) {
                continue;
            }

            $values = str_getcsv($line, ';');

            /* Use the first column as key. */
            $key = $values[0];

            $data[$key] = array_combine($languages, $values);
        }

        return $data;
    }

    /**
     * Returns the language constant values.
     *
     * @param array<string, string> $languages
     * @return array<string, string>
     */
    private function getLanguagesConstantValues(array $languages): array
    {
        $languageCodes = [
            'en - english' => 'en',
            'de - german' => 'de',
            'es - spanish' => 'es',
            'fr - french' => 'fr',
            'hr - croatian' => 'hr',
            'it - italian' => 'it',
            'pt - portuguese' => 'pt',
            'sv - swedish' => 'sv',
            'da - danish' => 'da',
            'cs - czech' => 'cs',
            'pl - polish' => 'pl',
            'ru - russian' => 'ru',
        ];

        $translations = [];

        foreach ($languageCodes as $string => $languageCode) {
            $translations[$languageCode] = $languages[$string];
        }

        return array_map(function ($key, $value) {
            return sprintf('\'%s\' => \'%s\',', $key, ucfirst($value));
        }, array_keys($translations), $translations);
    }

    /**
     * Returns the constants as string representation.
     *
     * @return string
     */
    public function getConstantsAsString(): string
    {
        $constants = '';

        foreach ($this->getLanguages() as $locale => $languages) {
            $translations = $this->getLanguagesConstantValues($languages);
            $translationString = PHP_EOL.
                str_repeat(' ', 8).
                implode(PHP_EOL.str_repeat(' ', 8), $translations).
                PHP_EOL.
                str_repeat(' ', 4);

            $constants .= sprintf(
                '    public const %s = [%s];',
                strtoupper($locale),
                $translationString
            ).PHP_EOL;
        }

        return $constants;
    }

    /**
     * Returns the constants as string representation.
     *
     * @param string $languageKey
     * @param string $constantName
     * @return string
     */
    public function getIndexConstantsAsString(string $languageKey = '639-1', string $constantName = 'ISO_639_1'): string
    {
        $template = '    public const LANGUAGE_%s = [%s];';
        $constants = '';

        foreach ($this->getLanguages() as $locale => $languages) {
            $key = $languages[$languageKey];

            $constants .= sprintf(
                '        \'%s\' => self::%s,',
                $key,
                strtoupper($locale)
            ).PHP_EOL;
        }

        return PHP_EOL.sprintf($template, $constantName, PHP_EOL.$constants.'    ').PHP_EOL;
    }

    /**
     * Returns the full class string.
     *
     * @return string
     */
    public function getClass(): string
    {
        return sprintf(
            self::CLASS_TEMPLATE,
            $this->csvFile,
            date('Y-m-d H:i:s'),
            date('Y-m-d H:i:s'),
            $this->getConstantsAsString(),
            $this->getIndexConstantsAsString(),
            $this->getIndexConstantsAsString('639-2/T', 'ISO_639_2_T')
        );
    }

    /**
     * Writes class to given php file.
     *
     * @param string $phpFile
     * @return bool
     */
    public function writeClass(string $phpFile): bool
    {
        file_put_contents($phpFile, $this->getClass());

        return true;
    }
}


$csvFile = 'data/languages.csv';
$phpFile = 'src/Constants/Language.php';

$buildLanguages = new BuildLanguages($csvFile);

match ($buildLanguages->writeClass($phpFile)) {
    true => print sprintf('"%s" transformed and written to "%s".', $csvFile, $phpFile),
    false => print sprintf('Unable to transform the given file "%s"', $csvFile),
};

print PHP_EOL;
