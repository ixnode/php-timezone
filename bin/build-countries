#!/usr/bin/env php
<?php

require_once 'vendor/autoload.php';

use Ixnode\PhpNamingConventions\Exception\FunctionReplaceException;
use Ixnode\PhpNamingConventions\NamingConventions;

class BuildCountries
{
    private const CLASS_TEMPLATE = <<<EOT
<?php

/*
 * This file is part of the ixnode/php-timezone project.
 *
 * (c) Björn Hempel <https://www.hempel.li/>
 *
 * For the full copyright and license information, please view the LICENSE.md
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace Ixnode\PhpTimezone\Constants;

/**
 * Class Country%s (auto-generated with bin/build-countries from "%s")
 *
 * @author Björn Hempel <bjoern@hempel.li>
 * @version 0.1.0 (%s)
 * @since 0.1.0 (%s) Generated version.
 */
class Country%s
{
%s
    /* Countries */
    public const COUNTRIES = [%s];
}

EOT;

    private const CLASS_TEMPLATE_ALL = <<<EOT
<?php

/*
 * This file is part of the ixnode/php-timezone project.
 *
 * (c) Björn Hempel <https://www.hempel.li/>
 *
 * For the full copyright and license information, please view the LICENSE.md
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace Ixnode\PhpTimezone\Constants;

/**
 * Class CountryAll (auto-generated with bin/build-countries from "%s")
 *
 * @author Björn Hempel <bjoern@hempel.li>
 * @version 0.1.0 (%s)
 * @since 0.1.0 (%s) Generated version.
 */
class CountryAll
{
    public const COUNTRY_NAMES = [

%s
        /* Unknown/Invalid */
        CountryUnknown::COUNTRY_CODE_UK => CountryUnknown::COUNTRY_NAME_UK,
        CountryUnknown::COUNTRY_CODE_IV => CountryUnknown::COUNTRY_NAME_IV,
    ];
}

EOT;

    private const PATH_COUNTRY_ALL = 'src/Constants/CountryAll.php';

    /** @var array<string, array<string, string>> $countries */
    private array $countries;

    /** @var array<string, array{name: string, data: array<int, string>}> $collectedCodes */
    private array $collectedCodes = [];

    /** @var array $collectedCountries */
    private array $collectedCountries = [];

    private string $date;

    /**
     * @param string $csvFileCountries
     * @param array<string, string> $csvFilesContinents
     */
    public function __construct(protected string $csvFileCountries, protected array $csvFilesContinents)
    {
        $this->countries = $this->getCountriesFromCsv();
        $this->date = date('Y-m-d H:i:s');
    }

    /**
     * Returns the countries from given CSV file.
     *
     * @return array<string, array<string, string>>
     */
    private function getCountriesFromCsv(): array
    {
        /* Check if the file exists. */
        if (!file_exists($this->csvFileCountries)) {
            print sprintf('The given file does not exist ("%s").%s', $this->csvFileCountries, PHP_EOL);
            exit(1);
        }

        /* Load the content of the file. */
        $csvContent = file_get_contents($this->csvFileCountries);

        /* Convert the content of the CSV into an array. */
        $data = [];
        $lines = explode(PHP_EOL, $csvContent);

        /* The first line contains the languages, we use these as keys for the array. */
        $languages = str_getcsv(array_shift($lines), ';');

        /* Remove the first column, because it does contain the locale header. */
        array_shift($languages);

        foreach ($lines as $line) {

            /* Ignore empty lines. */
            if (empty($line)) {
                continue;
            }

            $values = str_getcsv($line, ';');

            /* Use the first column as key. */
            $key = array_shift($values);

            $data[$key] = array_combine($languages, $values);
        }

        return $data;
    }

    /**
     * Combines the given countries CSV file with the continent file.
     *
     * @param string $csvContinent
     * @return array<string, array{iso2: string, iso3: string, name: array<string, string>, tld: string}
     */
    private function getContinentFromCsv(string $csvContinent): array
    {
        /* Check if the file exists. */
        if (!file_exists($csvContinent)) {
            print sprintf('The given file does not exist ("%s").%s', $csvContinent, PHP_EOL);
            exit(1);
        }

        /* Load the content of the file. */
        $csvContent = file_get_contents($csvContinent);

        /* Convert the content of the CSV into an array. */
        $data = array();
        $lines = explode(PHP_EOL, $csvContent);

        /* The first line contains the languages, we use these as keys for the array. */
        array_shift($lines);

        foreach ($lines as $line) {

            /* Ignore empty lines. */
            if (empty($line)) {
                continue;
            }

            $values = str_getcsv($line, ';');

            $iso2 = (string) $values[0];
            $iso3 = (string) $values[1];
            $tld = str_replace('.', '', (string) $values[2]);

            $values = [
                'iso2' => $iso2,
                'iso3' => $iso3,
                'name' => $this->countries[$iso2],
                'tld' => $tld,
            ];

            $data[$iso2] = $values;
        }

        return $data;
    }

    /**
     * Combines the given countries CSV file with all continent files.
     *
     * @return array<string, array{
     *     file: string,
     *     name: string,
     *     class-name: string,
     *     class-file: string,
     *     data: array<string, array{
     *         iso2: string,
     *         iso3: string,
     *         name: array<string, string>,
     *         tld: string
     *     }>
     * }>
     * @throws FunctionReplaceException
     */
    private function getAllContinentsFromCsv(): array
    {
        $data = [];

        foreach ($this->csvFilesContinents as $continent => $csvFileContinent) {
            $className = (new NamingConventions($continent))->getPascalCase();
            $name = (new NamingConventions($continent))->getTitle();

            $data[$continent] = [
                'file' => $csvFileContinent,
                'name' => $name,
                'class-name' => $className,
                'class-file' => sprintf('src/Constants/Country%s.php', $className),
                'data' => $this->getContinentFromCsv($csvFileContinent)
            ];
        }

        return $data;
    }

    /**
     * Collects codes for CountryAll class.
     *
     * @param string $continent
     * @param array $countries
     * @return void
     */
    private function collectCodes(string $continent, array $countries): void
    {
        $name = $countries['name'];
        $className = $countries['class-name'];
        $data = $countries['data'];

        if (!array_key_exists($continent, $this->collectedCodes)) {
            $this->collectedCodes[$continent] = [
                'name' => $name,
                'data' => [],
            ];
        }

        foreach ($data as $iso2 => $country) {
            $this->collectedCodes[$continent]['data'][] = sprintf(
                'Country%s::COUNTRY_CODE_%s => Country%s::COUNTRY_NAME_%s,',
                $className,
                strtoupper($iso2),
                $className,
                strtoupper($iso2)
            );
        }
    }

    /**
     * Collects codes for CountryAll class.
     *
     * @param string $continent
     * @param array $countries
     * @return void
     */
    private function collectCountries(string $continent, array $countries): void
    {
        $data = $countries['data'];

        if (!array_key_exists($continent, $this->collectedCodes)) {
            $this->collectedCountries[$continent] = [];
        }

        foreach ($data as $country) {
            $iso2 = $country['iso2'];
            $iso3 = $country['iso3'];
            $tld = $country['tld'];

            $this->collectedCountries[$continent][] = sprintf(
                '        self::COUNTRY_CODE_%s => [\'name\' => self::COUNTRY_NAME_%s, \'iso2\' => %s, \'iso3\' => %s, \'tld\' => %s, ],',
                strtoupper($iso2),
                strtoupper($iso2),
                empty($iso2) ? 'null' : sprintf('\'%s\'', $iso2),
                empty($iso3) ? 'null' : sprintf('\'%s\'', $iso3),
                empty($tld) ? 'null' : sprintf('\'%s\'', $tld)
            );
        }
    }

    /**
     * Returns the COUNTRY_CODE_XX constants for CountryXX class.
     *
     * @param array<string, array{
     *     iso2: string,
     *     iso3: string,
     *     name: array<string, string>,
     *     tld: string
     * }> $data
     * @return array<int, string>
     */
    private function getCodeConstants(array $data): array
    {
        $codeConstants = [];

        foreach ($data as $iso2 => $country) {
            $codeConstants[] = sprintf(
                '    public const COUNTRY_CODE_%s = \'%s\';',
                strtoupper($iso2),
                strtoupper($iso2)
            );
        }

        return $codeConstants;
    }

    /**
     * Returns the COUNTRY_CODE_XX constants for CountryXX class.
     *
     * @param array<string, array{
     *     iso2: string,
     *     iso3: string,
     *     name: array<string, string>,
     *     tld: string
     * }> $data
     * @return array<int, string>
     */
    private function getNameConstants(array $data): array
    {
        $nameConstants = [];

        foreach ($data as $iso2 => $country) {
            $languages = [];

            $names = $country['name'];

            foreach ($names as $language => $name) {
                $languages[] = sprintf(
                    '        Locale::%s => \'%s\',',
                    strtoupper($language),
                    str_replace('\'', '\\\'', $name)
                );
            }

            $nameConstants[] = sprintf(
                '    public const COUNTRY_NAME_%s = [%s%s%s];',
                strtoupper($iso2),
                PHP_EOL,
                implode(PHP_EOL, $languages),
                PHP_EOL.'    '
            );
        }

        return $nameConstants;
    }

    /**
     * Returns the constants as string representation (encapsulated within an array).
     *
     * @param string $continent
     * @param array{
     *     file: string,
     *     name: string,
     *     class-name: string,
     *     class-file: string,
     *     data: array<string, array{
     *         iso2: string,
     *         iso3: string,
     *         name: array<string, string>,
     *         tld: string
     *     }>
     * } $countries
     * @return array{data: string, file: string, class-name: string, class-file: string}
     */
    private function getConstantsCountryFromGivenContinent(string $continent, array $countries): array
    {
        $file = $countries['file'];
        $className = $countries['class-name'];
        $classFile = $countries['class-file'];
        $data = $countries['data'];

        $this->collectCodes($continent, $countries);
        $this->collectCountries($continent, $countries);

        $codeConstants = $this->getCodeConstants($data);
        $nameConstants = $this->getNameConstants($data);

        return [
            'data' => sprintf(
                '%s%s%s%s%s',

                '    /* Country codes */'.PHP_EOL,
                implode(PHP_EOL, $codeConstants).PHP_EOL,
                PHP_EOL,

                '    /* Country language names */'.PHP_EOL,
                implode(PHP_EOL, $nameConstants).PHP_EOL
            ),
            'file' => $file,
            'class-name' => $className,
            'class-file' => $classFile,
        ];
    }

    /**
     * Returns the constants as string representation (encapsulated within an array).
     *
     * @return array<string, array{data: string, file: string, class-name: string, class-file: string}>
     * @throws FunctionReplaceException
     */
    private function getConstantsCountryFromAllContinents(): array
    {
        $constantsData = [];

        foreach ($this->getAllContinentsFromCsv() as $continent => $countries) {
            $constantsData[$continent] = $this->getConstantsCountryFromGivenContinent($continent, $countries);
        }

        return $constantsData;
    }

    /**
     * Returns the constants for CountryAll class.
     *
     * @return array<int, string>
     */
    private function getConstantsCountryAll(): array
    {
        $constantsCountryAll = [];

        foreach ($this->collectedCodes as $continent) {
            $name = $continent['name'];
            $data = $continent['data'];

            $constantsCountryAll[] = sprintf('        /* %s */', $name);

            foreach ($data as $collected) {
                $constantsCountryAll[] = sprintf('        %s', $collected);
            }

            $constantsCountryAll[] = '';
        }

        return $constantsCountryAll;
    }

    /**
     * Returns the ready build CountryAll class.
     *
     * @return string
     */
    private function getCountryAllClass(): string
    {
        $allContent = $this->getConstantsCountryAll();

        /* Register all variables to all class. */
        return sprintf(
            self::CLASS_TEMPLATE_ALL,
            implode(', ', $this->csvFilesContinents),
            $this->date,
            $this->date,
            implode(PHP_EOL, $allContent),
        );
    }

    /**
     * Returns the class data.
     *
     * @param string $continent
     * @param array{data: string, file: string, class-name: string, class-file: string} $constantsData
     * @return array{data: string, file: string, class-name: string, class-file: string}
     */
    private function getCountryClass(string $continent, array $constantsData): array
    {
        $data = $constantsData['data'];
        $file = $constantsData['file'];
        $className = $constantsData['class-name'];
        $classFile = $constantsData['class-file'];

        return [
            'data' => sprintf(
                self::CLASS_TEMPLATE,
                $className,
                $file,
                $this->date,
                $this->date,
                $className,
                $data,
                PHP_EOL.implode(PHP_EOL, $this->collectedCountries[$continent]).PHP_EOL.'    '
            ),
            'file' => $file,
            'class-name' => $className,
            'class-file' => $classFile,
        ];
    }

    /**
     * Returns the class data from all continents.
     *
     * @return array<string, array{data: string, file: string, class-name: string, class-file: string}>
     * @throws FunctionReplaceException
     */
    private function getCountryClasses(): array
    {
        $classes = [];

        $constantsAll = $this->getConstantsCountryFromAllContinents();

        foreach ($constantsAll as $continent => $constantsData) {
            $classes[$continent] = $this->getCountryClass($continent, $constantsData);
        }

        return $classes;
    }

    /**
     * Writes classes to given php file.
     *
     * @return bool
     * @throws FunctionReplaceException
     */
    public function writeClasses(): bool
    {
        $classes = $this->getCountryClasses();

        foreach ($classes as $continent => $classesData) {
            $data = $classesData['data'];
            $classFile = $classesData['class-file'];

            file_put_contents($classFile, $data);
            print sprintf('Class %s written.'.PHP_EOL, $classFile);
        }

        /* Register all variables to all class. */
        $classFile = self::PATH_COUNTRY_ALL;
        $countryAllClass = $this->getCountryAllClass();
        file_put_contents($classFile, $countryAllClass);
        print sprintf('Class %s written.'.PHP_EOL, $classFile);

        return true;
    }
}


$csvFileCountries = 'data/countries.csv';
$csvFiles = [
    'africa' => 'data/africa.csv',
    'antarctica' => 'data/antarctica.csv',
    'asia' => 'data/asia.csv',
    'australia' => 'data/australia.csv',
    'europe' => 'data/europe.csv',
    'north-america' => 'data/north-america.csv',
    'south-america' => 'data/south-america.csv',
];

$buildCountries = new BuildCountries($csvFileCountries, $csvFiles);

match ($buildCountries->writeClasses()) {
    true => print 'Classes written.',
    false => print 'Unable to write classes.',
};
